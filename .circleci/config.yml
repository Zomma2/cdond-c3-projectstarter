version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow name.
    parameters:
      workflow_name:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            apk add --update tar zip curl
            # apk add --update awscli
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            echo "Rolling back and enviroment is being destroyed"
            echo "Stack Backend is being deleted"            
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_name>>
            echo "Stack Backend is deleted"  
            echo "Stack Frontend is being deleted" 
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_name>>
            echo "Stack Frontend is deleted" 
            echo "S3 bucket is being cleaned" 
            aws s3 rm --recursive s3://udapeople-kk1j287dhjlpsz4172
            echo "S3 cleaned"  
            echo "Rollback completed sucessfully"              
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash GET URL code goes here
            # See an example below
            SUCCESS=$(curl -H "token: 072f5caf-04ce-4ea8-b304-eaaab192b595" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
       - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [frontend-build]
      - run : 
          name : Front-end test
          command : |
            cd frontend
            npm install
            npm run test
      
                
  test-backend:
    docker:
       - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [backend-build]
      - run : 
          name : Back-end test
          command : |
            cd backend
            npm install
            npm run test

            
  scan-frontend:
    docker:
       - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [frontend-build]
      - run : 
          name : front-end scan
          command : |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
       - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [backend-build]
      - run : 
          name : back-end scan
          command : |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            touch .circleci/ansible/IP.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/IP.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_name: "${CIRCLE_WORKFLOW_ID:0:7}"
      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e6:77:4a:4b:f8:f3:ee:a1:c4:7b:2a:0a:fa:b9:36:d4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            pip3 install --upgrade pip 
            pip3 install awscli
      - destroy-environment :
           workflow_name: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            sudo npm install
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: 27e03c54-d810-4776-811d-87126f85c49d" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - destroy-environment :
           workflow_name: "${CIRCLE_WORKFLOW_ID:0:7}"


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs  
            sudo apt-get install python ansible tar zip curl
            sudo apt-get install awscli
            
      - run:
          name: Get backend url
          command: |
            cat .circleci/ansible/inventory.txt
            BACKEND_IP=$(sed -n 3p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp --recursive dist s3://udapeople-kk1j287dhjlpsz4172
            
      - destroy-environment :
           workflow_name: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e6:77:4a:4b:f8:f3:ee:a1:c4:7b:2a:0a:fa:b9:36:d4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm tar gzip ansible 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment :
           workflow_name: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm tar gzip ansible curl
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Get backend url
          command: |
            cat .circleci/ansible/inventory.txt
            export BACKEND_IP=$(sed -n 3p .circleci/ansible/inventory.txt)
            echo "$BACKEND_IP"
      - run:
          name: Backend smoke test.
          command: |
            echo "$BACKEND_IP"
            export BACKEND_IP=$(sed -n 3p .circleci/ansible/inventory.txt)
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
            return 1
            else
            return 0
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi

      - destroy-environment :
          workflow_name: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id : "${CIRCLE_WORKFLOW_ID:0:7}"
     
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install python tar zip curl
            yum -y install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            aws s3 cp --recursive s3://udapeople-kk1j287dhjlpsz4172 s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      
      - destroy-environment :
          workflow_name: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id : "${CIRCLE_WORKFLOW_ID:0:7}"        

  cleanup:
      docker:
      - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack name          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"   
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-kk1j287dhjlpsz4172" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
              

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend : 
          requires : [build-frontend]
      - test-backend :
          requires : [build-backend]
      - scan-backend :
          requires : [build-backend]
      - scan-frontend :
          requires : [build-frontend]
      - deploy-infrastructure : 
          requires : 
            - build-frontend 
            - build-backend
            - test-frontend
            - test-backend 
      - configure-infrastructure :
          requires : [deploy-infrastructure] 
      - run-migrations :
          requires : [configure-infrastructure] 
      - deploy-frontend :
          requires : [run-migrations]
      - deploy-backend : 
          requires : [deploy-frontend]    
      - smoke-test : 
          requires : [deploy-backend]
      - cloudfront-update :
          requires : [smoke-test]
      - cleanup : 
          requires : [cloudfront-update]      